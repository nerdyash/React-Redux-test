{"version":3,"sources":["actions/types.js","reducers/postReducer.js","reducers/index.js","store.js","components/Posts.js","actions/postAction.js","components/PostForm.js","App.js","serviceWorker.js","index.js","History.js"],"names":["FETCH_POSTS","UPDATE_POST","initState","items","item","searchValue","updateItem","combineReducers","posts","state","arguments","length","undefined","action","type","Object","objectSpread","payload","index","findIndex","id","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","Posts","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","fetchPosts","post","history","push","updatePost","setState","title","location","body","e","target","value","_this2","postData","filter","val","toLowerCase","indexOf","map","react_default","a","createElement","Paper","key","Typography","variant","component","Button","color","onClick","bind","Fragment","TextField","label","placeholder","onChange","Component","withRouter","connect","dispatch","axios","get","then","res","data","PostForm","userId","change","assertThisInitialized","submit","defineProperty","name","preventDefault","_this$state","createPost","onSubmit","noValidate","autoComplete","FormControl","Input","aria-describedby","FormHelperText","multiline","Save_default","match","params","fetch","method","JSON","stringify","headers","Content-type","response","json","App","es","react_router","className","path","exact","render","components_Posts","Boolean","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","setImmediate","history_createBrowserHistory__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","n","createHistory","pushLater","_len","args","Array","_key"],"mappings":"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","file":"static/js/main.d4467ca6.chunk.js","sourcesContent":["export const FETCH_POSTS = 'FETCH_POSTS';\nexport const UPDATE_POST = 'UPDATE_POST';","import { FETCH_POSTS, UPDATE_POST } from '../actions/types';\n\nconst initState = {\n    items: [],\n    item: {},\n    searchValue: '',\n    updateItem: {}\n}\n\nexport default function(state = initState, action) {\n    switch(action.type) {\n        case FETCH_POSTS:\n            // console.log('reducer : ' ,action.payload)\n            return {\n                ...state,\n                items: action.payload\n            }\n        case UPDATE_POST:\n            const index = state.items.findIndex(item => item.id === action.payload.id);\n            if(index > -1) {\n                state.items[index] = action.payload;\n                return {\n                    ...state\n                }\n            } else {\n                return {\n                    ...state,\n                    updateItem: action.payload\n                }\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport postReducer from './postReducer';\n\nexport default combineReducers({\n    posts: postReducer\n})","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, \n    initState, \n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n    );\n\nexport default store;","import React, { Component } from 'react';\nimport history from '../History';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postAction';\n\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport {withRouter} from \"react-router\";\n\nclass Posts extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            search: '',\n        }\n    }\n    componentWillMount() {\n        this.props.fetchPosts();\n    }\n    updatePost(post) {\n        const updatPost = {};\n        history.push('/postForm/'+post.id, {updatePost: post})\n        this.setState({title: history.location.state.updatePost.title});\n        this.setState({body: history.location.state.updatePost.body});\n    }\n\n    onChange(e) {\n        this.setState({\n            search: e.target.value\n        })\n    }\n\n    render() {\n        let updatedPosts = this.props.posts.filter((val) => {\n            return val.title.toLowerCase().indexOf(this.state.search) !== -1;\n        });\n        const postData = updatedPosts.map(post => (\n\n                <Paper key={post.id}>\n                    <Typography variant=\"h5\" component=\"h3\">\n                        {post.title}\n                    </Typography>\n                    <Typography component=\"p\">\n                        {post.body}\n                    </Typography>\n                    <Button color='secondary' onClick={this.updatePost.bind(this, post)}>Edit</Button>\n                </Paper>\n\n        ));\n        return (\n            <React.Fragment>\n                <h2>Search Posts : </h2>\n                <TextField\n                    id=\"standard-dense\"\n                    label=\"Search\"\n                    placeholder='Search the posts...'\n                    onChange={this.onChange.bind(this)}\n                />\n                <h1>Posts</h1>\n                {postData}\n            </React.Fragment>\n        )\n    }\n}\n\nPosts.propTypes = {\n    fetchPosts: propTypes.func.isRequired,\n    posts: propTypes.array.isRequired\n}\n\nconst mapStateToProps = state => ({\n    posts: state.posts.items\n})\n\nexport default withRouter(connect(mapStateToProps, { fetchPosts })(Posts));\n","import { FETCH_POSTS, UPDATE_POST } from './types';\nimport axios from 'axios';\n\nexport function fetchPosts() {\n    return function(dispatch) {\n        axios.get('https://jsonplaceholder.typicode.com/posts')\n            .then(res => dispatch({\n                type:FETCH_POSTS, \n                payload: res.data\n            }));\n    }\n}\n\nexport function updatePost(data) {\n    return function(dispatch) {\n        fetch('https://jsonplaceholder.typicode.com/posts/' + data.id, {\n            method: 'PUT',\n            body: JSON.stringify({\n                userId: data.userId,\n                id: data.id,\n                title: data.title,\n                body: data.body,\n            }),\n            headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        })\n            .then(response => response.json())\n            .then(json => dispatch({\n                type: UPDATE_POST,\n                payload: json\n            }));\n    }\n}","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport history from '../History';\nimport { connect } from 'react-redux';\nimport { updatePost } from '../actions/postAction';\n\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Input from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nclass PostForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userId: props.post ? props.post.userId : null,\n            id: props.post ? props.post.id : null,\n            title: props.post ? props.post.title : '',\n            body: props.post ? props.post.body : ''\n        }\n        this.change = this.change.bind(this);\n        this.submit = this.submit.bind(this);\n    }\n    // on change update the state value\n    change(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n    submit(e) {\n        e.preventDefault();\n        const { userId, id, title, body } = this.state;\n        const post = {\n            id: id,\n            title: title,\n            body: body,\n        }\n        if(id) {\n            this.props.updatePost({userId, id, title, body});\n        } else {\n            this.props.createPost(post);\n        }\n        history.push('/');\n    }\n    render() {\n        return (\n            <div>\n                <h2>Edit Post</h2>\n                <form onSubmit={this.submit} noValidate autoComplete=\"off\">\n                    <FormControl>\n                        <Input\n                            id=\"adornment-title\"\n                            value={this.state.title}\n                            onChange={this.change}\n                            aria-describedby=\"title\"\n                            type='text'\n                            name='title'\n                            placeholder='Title'\n                        />\n                        <FormHelperText id=\"weight-helper-text\">Title</FormHelperText>\n                    </FormControl>\n                    <FormControl>\n                        <Input\n                            id=\"adornment-body\"\n                            value={this.state.body}\n                            onChange={this.change}\n                            aria-describedby=\"body\"\n                            type='text'\n                            name='body'\n                            placeholder='Post'\n                            multiline\n                        />\n                        <FormHelperText id=\"weight-helper-text\">Post</FormHelperText>\n                    </FormControl>\n\n                    <Button variant=\"contained\" color=\"primary\" type='submit'>\n                        Save\n                        <SaveIcon />\n                    </Button>\n\n\n                </form>\n            </div>\n        )\n    }\n}\n\nPostForm.propTypes = {\n    post: propTypes.object.isRequired\n}\n\n\nfunction mapStateToProps(state, props) {\n    if(props.match.params.id) {\n        return {\n            post: props.location.state.updatePost\n        }\n    }\n    return { post: null};\n}\n\nexport default connect(mapStateToProps, { updatePost })(PostForm);","import React from 'react';\nimport { Router, Route } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport history from './History';\n\nimport './App.css';\n\nimport Posts from './components/Posts';\nimport PostForm from './components/PostForm';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n        <Router history={history}>\n          <div className=\"App\">\n              <Route path='/postForm/:id' component={PostForm} />\n              <Route exact path='/' render= {props => (\n                  <React.Fragment>\n                      <Posts />\n                  </React.Fragment>\n              )} />\n          </div>\n        </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import createHistory from 'history/createBrowserHistory'\n\nconst history = createHistory()\n\nhistory.pushLater = (...args) => setImmediate(() => history.push(...args))\n\nexport default history"],"sourceRoot":""}